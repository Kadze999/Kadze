import telebot
import json
import os
import re
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = '7958245884:AAHIsfXGoCQBvWNfmY0IN2hCb7N2bOsYrWE'

bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'users.json'

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        user_data = json.load(f)
else:
    user_data = {}

def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/start'), KeyboardButton('/info'), KeyboardButton('/play'), KeyboardButton('/top'))
    return kb

def play_again_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ò–≥—Ä–∞—Ç—å –µ—â—ë'))
    return kb

@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = str(message.chat.id)
    if chat_id not in user_data:
        user_data[chat_id] = {'step': 'name', 'score': 0}
        save_data()
    else:
        user_data[chat_id]['step'] = 'name'
        save_data()
    bot.send_message(chat_id,
                     "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n\n"
                     "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî –±—É–∫–≤–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã).",
                     reply_markup=main_keyboard())

@bot.message_handler(commands=['info'])
def cmd_info(message):
    chat_id = str(message.chat.id)
    data = user_data.get(chat_id)
    if not data or 'name' not in data or 'age' not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –ø–æ–º–æ—â—å—é /start", reply_markup=main_keyboard())
        return
    text = f"–ò–º—è: {data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n–û—á–∫–∏: {data.get('score', 0)}"
    bot.send_message(chat_id, text, reply_markup=main_keyboard())

@bot.message_handler(commands=['play'])
def cmd_play(message):
    chat_id = str(message.chat.id)
    data = user_data.get(chat_id)
    if not data or 'name' not in data or 'age' not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –ø–æ–º–æ—â—å—é /start", reply_markup=main_keyboard())
        return
    if 'game' in data and data['game'].get('active'):
        bot.send_message(chat_id, "–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ.", reply_markup=main_keyboard())
        return
    data['game'] = {
        'active': True,
        'number': random.randint(1, 20)
    }
    save_data()
    bot.send_message(chat_id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!", reply_markup=main_keyboard())

@bot.message_handler(commands=['top'])
def cmd_top(message):
    chat_id = str(message.chat.id)
    if not user_data:
        bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö.", reply_markup=main_keyboard())
        return
    
    scores = []
    for user_id, data in user_data.items():
        if 'name' in data and 'score' in data:
            scores.append((data['name'], data['score']))
    
    if not scores:
        bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—á–∫–∞–º–∏.", reply_markup=main_keyboard())
        return
    
    scores.sort(key=lambda x: x[1], reverse=True)
    top_scores = scores[:50]
    
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (name, score) in enumerate(top_scores, start=1):
        text += f"{i}. {name} ‚Äî {score} –æ—á–∫–æ–≤\n"
    
    bot.send_message(chat_id, text, reply_markup=main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_all(message):
    chat_id = str(message.chat.id)
    text = message.text.strip()
    data = user_data.get(chat_id)

    if not data:
        user_data[chat_id] = {'step': 'name', 'score': 0}
        save_data()
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=main_keyboard())
        return

    step = data.get('step')

    if step == 'name':
        if not text:
            bot.send_message(chat_id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
            return
        if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë]', text):
            bot.send_message(chat_id, "–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
            return
        if len(text) < 2 or len(text) > 30:
            bot.send_message(chat_id, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=main_keyboard())
            return
        data['name'] = text
        data['step'] = 'age'
        save_data()
        bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 2 –¥–æ 100)", reply_markup=main_keyboard())
        return

    if step == 'age':
        if not text.isdigit():
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.", reply_markup=main_keyboard())
            return
        age = int(text)
        if age < 2 or age > 100:
            bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 –ª–µ—Ç. –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=main_keyboard())
            return
        data['age'] = age
        data['step'] = None
        save_data()
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {data['name']}! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥–æ–π /play", reply_markup=main_keyboard())
        return

    if data.get('game', {}).get('active'):
        if text.lower() == '–∏–≥—Ä–∞—Ç—å –µ—â—ë':
            data['game'] = {
                'active': True,
                'number': random.randint(1, 20)
            }
            save_data()
            bot.send_message(chat_id, "–Ø –∑–∞–≥–∞–¥–∞–ª –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!", reply_markup=main_keyboard())
            return

        if not text.isdigit():
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.", reply_markup=main_keyboard())
            return
        guess = int(text)
        if guess < 1 or guess > 20:
            bot.send_message(chat_id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.", reply_markup=main_keyboard())
            return
        secret = data['game']['number']
        if guess == secret:
            data['score'] = data.get('score', 0) + 1
            data['game']['active'] = False
            save_data()
            bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret}.\n–¢–≤–æ–∏ –æ—á–∫–∏: {data['score']}", reply_markup=play_again_keyboard())
        elif guess < secret:
            bot.send_message(chat_id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
        else:
            bot.send_message(chat_id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
        return

    if text.lower() == '–∏–≥—Ä–∞—Ç—å –µ—â—ë':
        data['game'] = {
            'active': True,
            'number': random.randint(1, 20)
        }
        save_data()
        bot.send_message(chat_id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!", reply_markup=main_keyboard())
        return

    bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /start, /info, /play, /top –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å –µ—â—ë'.", reply_markup=main_keyboard())

bot.polling()
